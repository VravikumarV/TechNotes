

https://docs.datastax.com/en/cassandra/3.0/index.html

https://www.ebayinc.com/stories/blogs/tech/cassandra-data-modeling-best-practices-part-1/

https://www.red-gate.com/simple-talk/sql/nosql-databases/apache-cassandra-data-modeling-and-query-best-practices/

https://en.wikipedia.org/wiki/Apache_Cassandra

https://www.baeldung.com/cassandra-data-modeling

https://www.datastax.com/dev/blog/basic-rules-of-cassandra-data-modeling

Cassandra
***********

Apache Cassandra is a free and open-source, distributed, wide column store, NoSQL database management system designed to handle large amounts of data across many commodity servers, providing high availability with no single point of failure. Cassandra offers robust support for clusters spanning multiple datacenters,[1] with asynchronous masterless replication allowing low latency operations for all clients.


Cassandra is a highly scalable, eventually consistent, distributed, structured key-value store.

The Apache Cassandra database is the right choice when you need scalability and high availability without compromising performance. Linear scalability and proven fault-tolerance on
 commodity hardware or cloud infrastructure make it the perfect platform for mission-critical data. Cassandra's support for replicating across multiple datacenters is best-in-class,
 providing lower latency for your users and the peace of mind of knowing that you can survive regional outages.

FAULT TOLERANT: Data is automatically replicated to multiple nodes for fault-tolerance. Replication across multiple data centers is supported. Failed nodes can be replaced with no downtime.

PERFORMANT: 	Cassandra consistently outperforms popular NoSQL alternatives in benchmarks and real applications, primarily because of fundamental architectural choices.

DECENTRALIZED:  There are no single points of failure. There are no network bottlenecks. Every node in the cluster is identical.

SCALABLE: 		Some of the largest production deployments include Apple's, with over 75,000 nodes storing over 10 PB of data, Netflix (2,500 nodes, 420 TB, over 1 trillion requests per day), Chinese search engine Easou (270 nodes, 300 TB, over 800 million requests per day), and eBay (over 100 nodes, 250 TB).

DURABLE: 		Cassandra is suitable for applications that can't afford to lose data, even when an entire data center goes down.

YOU'RE IN CONTROL: Choose between synchronous or asynchronous replication for each update. Highly available asynchronous operations are optimized with features like Hinted Handoff and Read Repair.

ELASTIC:  Read and write throughput both increase linearly as new machines are added, with no downtime or interruption to applications.


https://www.javacodegeeks.com/2014/01/reactive-cassandra.html

https://spring.io/blog/2016/11/28/going-reactive-with-spring-data



***************************************************************************************************************************************************************

Installation:
================

https://www.pavanpkulkarni.com/blog/8-install-cassandra/

1. Install Java 7 / 8 and set JAVA_HOME
2. Install Python 2.7 or higher and set Python_home
3. Install Cassandra and set Cassandra_home
4. Install Thrift package using Python:  C:\thrift-0.11.0>python setup.py install
5. Start Cassandra server
6. Start cqlsh using :  C:\Cassandra\bin>cqlsh

cqlsh Commands:
=================

https://www.tutorialspoint.com/cassandra/cassandra_cqlsh.htm

https://docs.datastax.com/en/archived/cql/3.1/cql/cql_reference/cqlCommandsTOC.html

http://cassandra.apache.org/doc/4.0/cql/ddl.html	[V.Good]

1. Keyspace:

	cqlsh> CREATE KEYSPACE ecommerce WITH replication = {'class': 'SimpleStrategy', 'replication_factor' : 3};
	
	cqlsh> describe ecommerce
			CREATE KEYSPACE ecommerce WITH replication = {'class': 'SimpleStrategy', 'replication_factor': '3'}  AND durable_writes = true;
	
	Note: 	SimpleStrategy not recommended for production. The choice for prod is NetworkTopologyStrategy
	
	The USE statement allows to change the current keyspace (for the connection on which it is executed). 
	
	cqlsh> use ecommerce;
	
	cqlsh:ecommerce>	
	
2.	Table:

	CREATE TABLE user (
    userId int PRIMARY KEY,
	userType text,
    userName text,
	email text,
	phone text,
	lastLogin text,
	addressId text
	) WITH comment='User repository';

	insert into user(userId,userType,userName,email,phone,lastLogin,addressId) values (111,'C','vrk','vrk@gmail.com','29382i13762','31-Jan-2019','11');
	
***************************************************************************************************************************************************************




Spring Cassandra:
==================



https://dzone.com/articles/first-steps-to-spring-boot-cassandra

