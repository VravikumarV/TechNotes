React:


React class components vs functional components:   https://medium.com/@Zwenza/functional-vs-class-components-in-react-231e3fbd7108


     Function Components vs class:
     Highorder components:
      PureComponent:

     Controlled Components:         In React, mutable state is typically kept in the state property of components, and only updated with setState().
     Fully Controlled Components:
     UnCOntrolled Components:
     React.Component:
     React.PureComponent:
     React.Fragment:                React also provides a component for rendering multiple elements without a wrapper.
     React.Suspense:                Suspense lets components “wait” for something before rendering. Today, Suspense only supports one use case: loading components dynamically with React.lazy. In the future, it will support other use cases like data fetching.
     React.Lazy:                    React.lazy() lets you define a component that is loaded dynamically. This helps reduce the bundle size to delay loading components that aren’t used during the initial render.
                              const SomeComponent = React.lazy(() => import('./SomeComponent'));
                              Note that rendering lazy components requires that there’s a <React.Suspense> component higher in the rendering tree. This is how you specify a loading indicator.
                              Note
                              Using React.lazywith dynamic import requires Promises to be available in the JS environment. This requires a polyfill on IE11 and below.

                              Note:
                                          React.lazy() and <React.Suspense> are not yet supported by ReactDOMServer. This is a known limitation that will be resolved in the future.

     React.createRef:
     React.forwardRef:
     React.memo:                     
     Promises:    
                  Mounting:
                        
                  Update:
                              shouldComponentUpdate(nextProps, nextState):
                                          Instead of shouldComponentUpdate, consider using the built-in Pu
                                          reComponent instead of writing shouldComponentUpdate() by hand. PureComponent performs a shallow comparison of props and state, and reduces the chance that you’ll skip a necessary update.
                                          f you are confident you want to write it by hand, you may compare this.props with nextProps and this.state with nextState and return false to tell React the update can be skipped. Note that returning false does not prevent child components from re-rendering when their state changes.
                                          We do not recommend doing deep equality checks or using JSON.stringify() in shouldComponentUpdate(). It is very inefficient and will harm performance

                              static getDerivedStateFromProps(props, state):  Is invoked right before calling the render method, both on the initial mount and on subsequent updates.
                              It should return an object to update the state, or null to update nothing.
                              
                              Deriving state leads to verbose code and makes your components difficult to think about.
                                    Make sure you’re familiar with simpler alternatives:
                                    If you need to perform a side effect (for example, data fetching or an animation) in response to a change in props, use componentDidUpdate lifecycle instead.
                                    If you want to re-compute some data only when a prop changes, use a memoization helper instead.
                                    If you want to “reset” some state when a prop changes, consider either making a component fully controlled or fully uncontrolled with a key instead.

                  UnMounting


                  Error boundaries:       Error boundaries only catch errors in the components below them in the tree. An error boundary can’t catch an error within itself.

                        Error boundaries are React components that catch JavaScript errors anywhere in their child component tree, log those errors, and display a fallback UI instead of the component tree that crashed. Error boundaries catch errors during rendering, in lifecycle methods, and in constructors of the whole tree below them.
                        A class component becomes an error boundary if it defines either (or both) of the lifecycle methods static getDerivedStateFromError() or componentDidCatch(). Updating state from these lifecycles lets you capture an unhandled JavaScript error in the below tree and display a fallback UI.

                  static getDerivedStateFromError(error):
                  componentDidCatch(error, info):
                  

Lify cycle:

      https://reactjs.org/docs/state-and-lifecycle.html

      https://programmingwithmosh.com/javascript/react-lifecycle-methods/

      Every component in React goes through a lifecycle of events. I like to think of them as going through a cycle of birth, growth, and death.

      Mounting – Birth of your component
      Update – Growth of your component
      Unmount – Death of your component
      Now that we understand the series of lifecycle events let’s learn more about how they work.

      https://programmingwithmosh.com/javascript/react-lifecycle-methods/
      
      
      React Before Hooks vs Afetr Hooks:
      
      Hooks:             Hooks are a new addition in React 16.8. They let you use state and other React features without writing a class. Hooks have a dedicated docs section and a separate API reference:
            Basic Hooks
                        useState
                        useEffect
                        useContext
            Additional Hooks
                        useReducer
                        useCallback
                        useMemo
                        useRef
                        useImperativeHandle
                        useLayoutEffect
                        useDebugValue

      
      Redux & Redux Alternatives:
      
                  
  React Profiler (Frtom React 16.5): Collect tioming information to identify performance bottlenecks in react applications.
  
  
Time slicling & suspence features:


TransitionCOmponent:
React.FC:       Reacts functional components are simply JavaScript functions, but this doesn’t mean that they don’t follow any constraints. Specifically, and most importantly, functional components take an object of props, which we will need to type.
                Creating a functional component in TypeScript we first need to use the type React.FC, which is based on the FunctionComponent interface:
  
                

Axios:  Axios is among the most popular promise based HTTP clients for both browsers and Node.js.
        Axios provides support for request and response interceptors, transformers and auto-conversion to JSON. It’s also protecting you by default against cross-site request forgery (XSRF).
        Axios is promise-based and thus we can take advantage of async and await for more readable asynchronous code. We can also intercept and cancel requests, and there’s built-in client side protection against cross site request forgery. But the best part about Axios? The easy to use API!
      
      
      https://designrevision.com/react-axios/
        
Fetch API:  Fetch is a new-ish, promise-based API that lets us do Ajax requests without all the fuss associated with XMLHttpRequest. As you’ll see in this post, Fetch is very easy to use and work with and greatly simplifies fetching resources from an API. Plus, it’s now supported in all modern browsers, so using Fetch is really a no-brainer.
            Let’s demonstrate a simple GET request by going and GET ourselves some dummy data from the JSONPlaceholder API:
            
            
            
    https://www.edureka.co/blog/interview-questions/react-interview-questions/
    https://medium.com/@vigowebs/frequently-asked-react-js-interview-questions-and-answers-36f3dd99f486
    https://www.fullstack.cafe/blog/react-js-interview-questions
    
            
            fetch('https://jsonplaceholder.typicode.com/users')
              .then(res => res.json())
              .then(res => res.map(user => user.username))
              .then(userNames => console.log(userNames));


          https://alligator.io/js/fetch-api/

Axios vs Fetch:

************************************************************

Life Cycle:

  https://reactjs.org/docs/state-and-lifecycle.html
  
  https://programmingwithmosh.com/javascript/react-lifecycle-methods/
  
  https://medium.com/javascript-scene/javascript-es6-var-let-or-const-ba58b8dcde75
  
PropTypes:
      
      https://reactjs.org/docs/typechecking-with-proptypes.html
      
      https://www.geeksforgeeks.org/reactjs-proptypes/
      
      https://blog.bitsrc.io/understanding-react-proptypes-type-checking-in-react-9648a62ce12e
    
      https://css-tricks.com/props-and-proptypes-in-react/
      
    
Exeption Handling:

      https://www.smashingmagazine.com/2020/06/react-error-handling-reporting-error-boundary-sentry/
      
      https://reactjs.org/blog/2017/07/26/error-handling-in-react-16.html
      
      
Async, Await

https://medium.com/javascript-scene/javascript-es6-var-let-or-const-ba58b8dcde75

https://levelup.gitconnected.com/usetypescript-a-complete-guide-to-react-hooks-and-typescript-db1858d1fb9c                     [React Hooks]

https://levelup.gitconnected.com/using-react-functional-components-with-hooks-in-typescript-6d61075edddc                       [React FC] 

https://levelup.gitconnected.com/a-guide-to-service-workers-in-react-js-82aec1d6a22d                                            [Service Workers]

Store:

    https://stackoverflow.com/questions/48356854/storing-data-in-react
    
    https://react-redux.js.org/using-react-redux/accessing-store?_sm_au_=iVVMDMqwk5FTLNtPscpQ8KHVVHCJF
    
    https://www.freecodecamp.org/news/where-do-i-belong-a-guide-to-saving-react-component-data-in-state-store-static-and-this-c49b335e2a00/
    
    https://www.robinwieruch.de/local-storage-react
    
    

Testing:
    https://testing-library.com/docs/dom-testing-library/cheatsheet
    
    https://testing-library.com/docs/react-testing-library/cheatsheet
    
    https://jestjs.io/docs/en/tutorial-react
    
Antd:

    https://ant.design/docs/spec/reaction

https://create-react-app.dev/docs/making-a-progressive-web-app/

Responsive App:

https://codeburst.io/how-to-build-fully-responsive-react-apps-with-nothing-but-inline-styles-and-javascript-242c091b6ba1

https://medium.com/@mustwin/responsive-react-9b56d63c4edc

https://www.npmjs.com/package/react-responsive




FAQs:

  https://reactjs.org/docs/hooks-reference.html                                           { Hooks }
  
  https://kentcdodds.com/blog/the-state-reducer-pattern-with-react-hooks            { Reducer pattern }

  https://www.edureka.co/blog/interview-questions/react-interview-questions/
  
  https://medium.com/@vigowebs/frequently-asked-react-js-interview-questions-and-answers-36f3dd99f486
  
  https://www.fullstack.cafe/blog/react-js-interview-questions
  
  https://medium.com/javascript-scene/javascript-es6-var-let-or-const-ba58b8dcde75
  
  https://medium.com/@theflyingmantis/async-await-react-promise-testing-a0d454b5461b { Async, Await & React promise }
  
  https://reactjs.org/docs/forms.html#controlled-components { Controlled Components }
  
  https://medium.com/javascript-in-plain-english/how-to-use-async-function-in-react-hook-useeffect-typescript-js-6204a788a435  { async & useEffect }
  
  https://www.robinwieruch.de/react-hooks-fetch-data { Data Fetch with React Hooks }
  
  https://medium.com/@miloshn/how-to-fetch-data-using-reacthooks-and-async-await-in-react-3ab137c63a2e { Data Fetch with React Hooks  using Async / Await }
  
  https://stackoverflow.com/questions/53146795/react-usereducer-async-data-fetch { React useReducer async data fetch }
  
  https://medium.com/javascript-in-plain-english/handling-api-calls-using-async-await-in-useeffect-hook-990fb4ae423 { Handling API calls with Async await with useEffect hook }
  
  https://stackoverflow.com/questions/53898810/executing-async-code-on-update-of-state-with-react-hooks
  
  https://dev.to/silvestricodes/asynchronous-flows-with-react-hooks-1g0m
  
  
  
  https://medium.com/@theflyingmantis/callbacks-vs-promises-and-basics-of-js-80d3d1515e81
  
  
  https://www.tiny.cloud/docs/integrations/react/  { Text editor for content, formatting & impage}
